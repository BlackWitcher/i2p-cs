<<<<<<< Updated upstream
﻿ ﻿using System;
 using System.Collections.Generic;
 using System.Linq;
 using System.Text;
 using Org.BouncyCastle.Math;
 using I2PCore.Data;
 using Org.BouncyCastle.Security;
 
 namespace I2PCore.Utils
 {
     class ElGamalCrypto
     {
         BigInteger a;
         BigInteger b1;
 
         public class HashCheckFailException: Exception
         {
         }
 
         public ElGamalCrypto( BigInteger key )
         {
             var k = new BigInteger( I2PConstants.ElGamalP.BitLength, new SecureRandom() );
             if ( k.CompareTo( BigInteger.Zero ) == 0 ) k = new BigInteger( "1" );
 
             a = I2PConstants.ElGamalG.ModPow( k, I2PConstants.ElGamalP );
 
             b1 = key.ModPow( k, I2PConstants.ElGamalP );
         }
 
         public byte[] Encrypt( byte[] data, int len, bool zeropad )
         {
             var result = new byte[zeropad ? 514 : 512];
             var hashbuf = new byte[255];
 
             hashbuf[0] = 0xFF;
             Array.Copy( data, 0, hashbuf, 33, len );
             var hash = I2PSignSHA256.DoSign( hashbuf, 33, 222 );
             Array.Copy( hash, 0, hashbuf, 1, hash.Length );
 
             var b = b1.Multiply( new BigInteger( hash ) ).Mod( I2PConstants.ElGamalP );
 
             if ( zeropad )
             {
                 result[0] = 0;
                 result[257] = 0;
                 Array.Copy( a.ToByteArray( 256 ), 1, result, 0, 256 );
                 Array.Copy( b.ToByteArray( 256 ), 1, result, 258, 256 );
             }
             else
             {
                 Array.Copy( a.ToByteArray( 256 ), result, 256 );
                 Array.Copy( b.ToByteArray( 256 ), 0, result, 256, 256 );
             }
 
             return result;
         }
 
         public static byte[] Decrypt( byte[] data, BigInteger key, bool zeropad )
         {
             var x = I2PConstants.ElGamalP.Subtract( key ).Subtract( BigInteger.One );
 
             var a = zeropad ? new BigInteger( 1, data, 1, 256 ): new BigInteger( 1, data, 0, 256 );
             var b = zeropad ? new BigInteger( 1, data, 258, 256 ): new BigInteger( 1, data, 256, 256 );
 
             var m = b.Multiply( a.ModPow( x, I2PConstants.ElGamalP ) ).Mod( I2PConstants.ElGamalP ).ToByteArray( 255 );
             var hash = I2PSignSHA256.DoSign( m, 33, 222 );
             if ( !BufUtils.Equal( m, 1, hash, 0, 32 ) ) throw new HashCheckFailException();
 
             return m.Copy( 33, 222 );
         }
 
         /*
         public static KeyValuePair<I2PPrivateKey, I2PPublicKey> GenerateKeyPair()
         {
             var priv = new BigInteger( 256 * 8, new SecureRandom() );
             return new KeyValuePair<I2PPrivateKey, I2PPublicKey>(
                 new I2PPrivateKey( priv ), 
                 new I2PPrivateKey( priv.ModPow( I2PConstants.ElGamalG, priv, I2PConstants.ElGamalP ) ) );
         }
          */
     }
 }
=======
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Org.BouncyCastle.Math;
using I2PCore.Data;
using Org.BouncyCastle.Security;

namespace I2PCore.Utils
{
    class ElGamalCrypto
    {
        BigInteger a;
        BigInteger b1;

        public class HashCheckFailException: Exception
        {
        }

        public ElGamalCrypto( BigInteger key )
        {
            var k = new BigInteger( I2PConstants.ElGamalP.BitLength, new SecureRandom() );
            if ( k.CompareTo( BigInteger.Zero ) == 0 ) k = new BigInteger( "1" );

            a = I2PConstants.ElGamalG.ModPow( k, I2PConstants.ElGamalP );

            b1 = key.ModPow( k, I2PConstants.ElGamalP );
        }

        public byte[] Encrypt( byte[] data, int len, bool zeropad )
        {
            var result = new byte[zeropad ? 514 : 512];
            var hashbuf = new byte[255];

            hashbuf[0] = 0xFF;
            Array.Copy( data, 0, hashbuf, 33, len );
            var hash = I2PSignSHA256.DoSign( hashbuf, 33, 222 );
            Array.Copy( hash, 0, hashbuf, 1, hash.Length );

            var b = b1.Multiply( new BigInteger( hash ) ).Mod( I2PConstants.ElGamalP );

            if ( zeropad )
            {
                result[0] = 0;
                result[257] = 0;
                Array.Copy( a.ToByteArray( 256 ), 1, result, 0, 256 );
                Array.Copy( b.ToByteArray( 256 ), 1, result, 258, 256 );
            }
            else
            {
                Array.Copy( a.ToByteArray( 256 ), result, 256 );
                Array.Copy( b.ToByteArray( 256 ), 0, result, 256, 256 );
            }

            return result;
        }

        public static byte[] Decrypt( byte[] data, BigInteger key, bool zeropad )
        {
            var x = I2PConstants.ElGamalP.Subtract( key ).Subtract( BigInteger.One );

            var a = zeropad ? new BigInteger( 1, data, 1, 256 ): new BigInteger( 1, data, 0, 256 );
            var b = zeropad ? new BigInteger( 1, data, 258, 256 ): new BigInteger( 1, data, 256, 256 );

            var m = b.Multiply( a.ModPow( x, I2PConstants.ElGamalP ) ).Mod( I2PConstants.ElGamalP ).ToByteArray( 255 );
            var hash = I2PSignSHA256.DoSign( m, 33, 222 );
            if ( !BufUtils.Equal( m, 1, hash, 0, 32 ) ) throw new HashCheckFailException();

            return m.Copy( 33, 222 );
        }

        /*
        public static KeyValuePair<I2PPrivateKey, I2PPublicKey> GenerateKeyPair()
        {
            var priv = new BigInteger( 256 * 8, new SecureRandom() );
            return new KeyValuePair<I2PPrivateKey, I2PPublicKey>(
                new I2PPrivateKey( priv ), 
                new I2PPrivateKey( priv.ModPow( I2PConstants.ElGamalG, priv, I2PConstants.ElGamalP ) ) );
        }
         */
    }
}
>>>>>>> Stashed changes
